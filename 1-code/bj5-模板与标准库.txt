泛型编程
    所谓泛型编程，就是指独立于某些特定类型的编程，使得同一份代码适用于多种数据类型，从而提高代码重用性和灵活性。

    在C++中，使用模板来实现泛型编程。


模板 template
    模板用于描述那些通用的行为或概念。
    根据描述的对象不同，模板可分为：
    函数模板
    类模板    


函数模板 
    函数模板不是函数，而是用来生成函数的一种模板(机制)    
    一般格式：
    template<typename T1, ..., typename Tn>
    返回类型 函数名(参数列表)
    {
        函数体
    }
    例：
    template<typename T>
    void swap(T&a, T& b)
    {
        T tmp = a;
        a = b;
        b = tmp;
    }

    int a = 1;
    int b = 2;
    swap(a, b);=> 根据实参的值，推导出模板参数的类型为int, 生成具体的函数 void swap(int&,int&), 再调用这个具体生成的函数

    练习：
        用函数模板实现常规算法
            交换、比较、查找、最值
            swap 
            compare
                比较两个对象，
                    第一个比第二个小，则返回-1
                    第一个比第二个大，则返回1
                    相等，返回0
            find
                从一个任意类型的数组中，查找特定的值，找到则返回其下标，否则返回-1
            max
            min

    说明：
    1、模板声明中的 typename 用于说明其后的标识符，是一个类型的名字，也可以使用关键字 class
    2、一般情况下，编译器能根据实参自动推导模板参数的具体类型
        但，如果编译器无法根据实参推导出所有的模板参数，或推导出来的模板参数与期望的不一致
        此时，需要显示的指定模板函数类型，如下：
        函数模板名<模板参数列表>(实参列表)
        例： 
        template<class T>
        T max(T a, T b)
        {
            return a > b ?a : b;
        }
        max(a, b)   // 自动推导
        max<int>(a,b)// 显示指定

    3、模板的声明与定义如果分开，则在声明与定义时都需要添加模板声明
        且，模板的声明与定义必须出现在同一个编译单元中。
        所以，一般的做法是把模板写在头文件中，且声明与定义一般不分开。


    4、模板特化
        模板特化是 通用模板的一种特殊情况,  一般如下：
        template<>
        返回类型 函数名(参数列表)
        {
            函数体 
        }
        模板的特化版本，必须出现在通过版本的后面。
        例： 
        template <typename T> // 通过版本
        int mycompare(T a, T b)
        {
            if (b < a)
                return 1;

            if (a < b)
                return -1;

            return 0;
        }

        template <> // 特别版本
        int mycompare(const char *a, const char *b)
        {
            if (strcmp(a, b) > 0)
                return 1;

            if (strcmp(a, b) < 0)
                return -1;

            return 0;
        }        



类模板
    类模板不是类，而是用来生成类的一种机制
    一般格式：
    template<typename T1, ..., typename Tn>
    class 类名
    {
    public:
        公有方法
    private:
        私有数据/方法
    };

    说明： 
        使用类模板时，必须显示的指定模板参数

        当用类模板实例化对象时，是编译器自动使用模板生成类型，再用类型实例化对象
            模板类名<模板参数列表> 对象名;

        类模板的成员函数声明与定义如果分开，则它们必须出现在同一个编译单元中，且在类外定义成员函数时，必需要添加模板声明。

    例：
    template<typename T>
    class SeqStack
    {
    public:
        SeqStack(int n);
        ~SeqStack();
        void push(T data);
        void pop();
        T top() const;
        bool empty() const;
    private:
        T* _data;
        int _top;
        int _max;
    };

    SeqStack<int> stack1(10);
    stack1.push(1);
    stack1.push(2);
    stack1.push(3);
    while (!stack1.empty())
    {
        cout << stack1.top() << endl;
        stack1.pop();
    }
    SeqStack<std::string> stack2(5);



    练习： 
    用类模板实现一个动态数组

    template<typename T>
    class Vector
    {
    public:
        Vector();
        ~Vector();
        void push_back(T data); // 插入数据时，如果容量不足，则扩容
        void pop_back();
        T back() const;
        int size() const;
        bool empty() const;
        int capacity() const;
        T at(int index) const;
        operator[]
        operator<<

        拷贝构造
        拷贝赋值
        移动构造
        移动赋值
    private:
        T* _data;
        int _size; // 当前元素的个数
        int _capacity;// 最多能存放多少个元素
    };

    Vector<int> a;
    a.push_back(1);
    a.push_back(2);
    for (int i = 0; i < a.size(); i++)
    {
        cout << a.at(i) << endl;
    }
    cout << a << endl;




标准模板库 Standard Template Library - STL
    STL是标准库的重要组成部分，由以下几部分组成
    容器、算法、迭代器、函数对象


容器 container
    容器是一些通用的类模板与算法的汇集，允许程序员简单地实现如队列、链表和栈这样的常见数据结构。有两 (C++11 前)三 (C++11 起)类容器：
    顺序容器
    关联容器
    无序关联容器(C++11 起)
    它们被设计为各自支持一组不同的操作。
    容器管理着为其元素分配的存储空间，并提供成员函数来直接访问或通过迭代器（具有类似于指针的属性的对象）访问它们。

    顺序容器
    序列容器实现能按顺序访问的数据结构。
    array           (C++11)固定大小的原位连续数组(类模板)
    vector          动态的连续数组(类模板)
    deque           双端队列(类模板)
    forward_list    (C++11 起)单链表(类模板)
    list            双链表(类模板)

    关联容器
    关联容器实现能快速查找（O(log n) 复杂度）的有序数据结构。
    set         唯一键的集合，按照键排序(类模板)
    map         键值对的集合，按照键排序，键是唯一的(类模板)
    multiset    键的集合，按照键排序(类模板)
    multimap    键值对的集合，按照键排序(类模板)


    无序关联容器 (C++11 起)
    无序关联容器提供能快速查找（平均 O(1)，最坏情况 O(n) 的复杂度）的无序（散列）数据结构。
    unordered_set       (C++11 起)唯一键的集合，按照键生成散列(类模板)
    unordered_map       (C++11 起)键值对的集合，按照键生成散列，键是唯一的(类模板)
    unordered_multiset  (C++11 起)键的集合，按照键生成散列(类模板)
    unordered_multimap  (C++11 起)键值对的集合，按照键生成散列(类模板)


    容器适配器
    容器适配器为顺序容器提供了不同的接口。
    stack           适配一个容器以提供栈（LIFO 数据结构）(类模板)
    queue           适配一个容器以提供队列（FIFO 数据结构）(类模板)
    priority_queue  适配一个容器以提供优先级队列(类模板)




作业：
    1.编写一个函数，实现输入一个字符串，对字符串中的各个字符
    按照统计个数 由多到少输出各字符，如果统计的个数相同，则按ASCII码由小到大排序输出字符
    如： "aabbb22bb2cc", 输出：b2ac

    2.顺序容器与关联容器的使用示例



