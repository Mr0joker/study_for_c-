1、面向对象和面向过程
    C++是一门面向对象的编程语言
    面向对象和面向过程是解决问题的两种方法(思想)


    面向过程 
        面向过程主要关注解决问题的步骤与过程，通过一系列函数(过程)进行操作与处理
        将程序看作是一系列的步骤，通过顺序、选择或循环等基本的控制结构来组织程序代码
        面向过程的程序通常将数据和相关的操作分离，以函数为中心进行程序设计。
    例：在开发板的显示屏上绘制一个矩形
        1、打开屏幕文件
        2、内存映射
        3、绘制
        4、解除映射
        5、关闭文件


    面向对象 
        面向对象将程序看作是 一系列的对象，这些对象包含数据和相关的操作。
        对象之间通过传递消息进行交互协作。
        面向对象强调的是数据与相关操作的 封装性，通过类与对象进行程序设计。
    例：在开发板的显示屏上绘制一个矩形
        1、定义屏幕类型，描述的是屏幕的属性和行为   
        2、实例化一个屏幕对象
        3、定义矩形类型，描述矩形的属性和行为
        4、实例化一个矩形对象
        5、给矩形发消息，绘制到指定的屏幕对象上

    面向对象的三大基本特征：
    封装 
    继承
    多态

2、面向对象编程 (OOP)
    类(class)
        类就是类型，是自定义的数据类型
        用于描述实现世界中那些复杂的概念，描述同一类事物的共同的属性和行为。
        例： 
            学生
                属性：学号、姓名、年龄、性别、学校、专业...
                行为：吃、喝、学习、说话、走路...
        在程序中，一般用数据表示属性，用函数表示行为
        class的一般形式：
        class 类名 
        {
        访问权限符：
            属性(成员变量) 
            行为(成员函数/方法/接口)
        };

        访问权限符(访问修饰符、访问控制符)：
        public      公开、公有的，表示对外公开、外界可直接访问
        private     私有、隐藏的，表示对外不可见(不可直接访问)，但对其朋友(friend)例外
        protected   (受)保护的、隐藏的，表示对外不可见(不可直接访问)，但对其朋友(friend)与后代例外

    注：
        在定义单个类型时，使用关键字class,也可以使用struct
        对于class来说，如果成员缺省访问修饰符，则默认为private
        对于struct来说，如果成员缺省访问修饰符，则默认为public




    对象(object)
        从面向对象的角度，一切皆对象
        从编程的角度来说，类 类型的变量，就是对象

        用 类 类型 定义变量，称为实例化对象
        一般格式：
        类名 对象名;
        例： 
        Student s;

        给对象发消息：
        对象名.消息名();
        例： 
        s.sutdy();


3、类的组织形式
    标准C++类，一般由两部分组成：
    头文件(.h/.hpp), 写类的声明
    源文件(.cpp)， 写类的定义
    例： 
    头文件 point.hpp
    #ifndef POINT_HPP
    #define POINT_HPP

    class Point
    {
    public:
        // access function
        int getX() const;
        void setX(int x);
        ...
    private:
        int _x; 
        int _y;
    };

    #endif

    源文件 point.cpp
    #include "point.hpp"
    int Point::getX() const
    {
        return _x;
    }
    void Point::setX(int x)
    {
        _x = x;
    }    
    说明：
        在类外定义成员函数时，必须指明作用域。

    测试文件：test_point.cpp 
    #include "point.hpp"

    int main(int argc, char const *argv[])
    {
        Point pos;
        pos.setX(100);
        ...
        return 0;
    }    


4、只读成员函数
    对于对象的属性，一般会设计一组函数来进行访问(access function)    
    一般用getxxx这种函数名表示读取属性的值，用setxxx表示修改属性的值
    如果某些成员函数确实只读取成员变量的值，不会修改对象的状态，则可以使用关键字const加以说明。
    一般如下：
    class 类名 
    {
    public:
        返回类型 函数名(参数列表) const; // 声明
    };
    返回类型 类名::函数名(参数列表) const // 定义
    {
        函数体
    }

    注：通过const引用或指向const的指针，只能调用对象的只读成员函数。



    作业：
        Screen s;
        Rect r;
        ...
        r.draw(s);    

    class Screen
    {
    public:
        void init();
        void draw_point(int x, int y, int color);
        void draw_point(Point pos, Color color);
        void uninit();
    private:
        ...
    };

    class Rect 
    {
    public:
        ...
        void draw(Screen& s)
        {
            for ()
            {
                for ()
                {
                    s.draw_point(...);
                }
            }
        }
    private:
        ...
    };



5、构造函数
    功能：构造函数是一种特殊的成员函数，用于初始化对象的成员
    特点：
        构造函数名称与类名相同
        构造函数没有返回类型，只有函数名、参数列表及函数体
        在实例化对象时，自动调用构造函数。实例化一个对象，一定会调用且只调用一次构造函数。
        如果类中没有显式的定义构造函数，编译器会自动合成一个构造函数。

    例： 
    class Demo 
    {
    public:
        Demo() {}   // 默认构造函数
        Demo(int x) {} // 带参数的构造函数
    };

    Demo d1; // 自动调用 Demo()
    Demo d2(100); // 自动调用 Demo(int)

    说明： 
    1、默认构造函数(不提供任何实参就能调用的构造函数)，有两种情况
        a.没有参数
        b.有参数，但全部有默认值

    2、如果在实例化对象时，需要传递参数进行初始化，常见形式：
        类名 对象名(实参列表);
        类名 对象名{实参列表}; // C++11
        例： 
        Demo d1(100);
        Demo d2{200};

        但是，如果在实例化对象时，不提供实参，进行默认初始化，则不能写圆括号
        例： 
        Demo d3; // 不写括号，调用默认构造函数
        Demo d4(); // 这是函数声明，不是实例化对象
        但可以用大括号
        例： 
        Demo d5{}; // 这是实例化对象，要求C++11


    3、实例化对象时，会自动调用构造函数，反之，调用构造函数，一定会实例化一个对象。
    例： 
        Demo d6; // 自动调用默认构造函数
        Demo d7(300); // 自动调用Demo(int)

        直接显示的调用构造函数，会构造一个没有名字的对象，生命周期短暂，一般称为匿名(临时)对象
        Demo(400); 得到一个临时对象，主要用于传参。
        例： 
        void print_demo(const Demo& d);
        print_demo(d1); // 先创建对象d1, 再传参
        print_demo(Demo(800));// 在传参时构造一个临时对象，传递给函数


6、构造函数初始化列表
    所谓构造函数成员初始化列表，指在定义构造函数时，在参数列表的后面、函数体的大括号之前，用一个冒号引导，进行成员变量的初始化，
    一般如下：
    构造函数(参数列表):成员变量1(初值1), ..., 成员变量n(初值n)
    {
        函数体
    }
    有三种情况，必须使用成员初始化列表：
    1、成员是引用
    2、引用是常量
    3、成员对象没有默认构造函数
    例： 
    class Demo
    {
    public:
        Demo(int x, int y): _x(x), _y(y), _z(0), _r(_x), _o(x) {}
    private:
        int _x;
        int _y;
        const int _z; // 成员是常量
        int& _r;    // 成员是引用
        Other _o;   // 成员对象没有默认构造函数
    };    

    一般建议使用成员初始化列表：
    1、代码理简洁
    2、效率更高



7、析构函数    
    功能：析构函数也是一种特殊的成员函数，用于释放对象所占用的系统资源。
    特点： 
        析构函数的名字由 ~加上类名组成： ~类名 
        析构函数没有返回类型，只有函数名、参数列表及函数体，且参数列表必须为空。
        当对象销毁时，自动调用。
        如果类中没有显式的定义析构函数，编译器会自动合成一个析构函数。

    例： 
    class Demo 
    {
    public:
        Demo() {}       // 默认构造函数
        Demo(int x) {}  // 带参数的构造函数
        ~Demo() {}      // 析构函数 
    };

    注： 
    只有当对象占用了系统资源，才需要自己定义析构函数。



8、this指针
    当用一个类 实例化一个对象，对象具体存在，占用存储空间(空类对象也会占用一个字节)
    从理论上来说，一个对象由两部分组成：
        属性(数据) 
        行为(函数)

    但从实现的角度来看，每个对象有自己的存储空间，但存储空间中只存储了对象自己的成员变量(数据)
    
    成员函数不占用对象的存储空间，单独存放于 代码段，只保存一份，由所有同类型的对象 所共用。

    那么，相同的成员函数，如何区分不同的对象？
        在C++中，每个非静态的成员函数，都有一个隐藏参数，名为this
        当用一个对象调用这种函数时，编译器会自动把该对象的地址传递给这个隐藏的this指针
        当需要访问对象的成员时，就通过这个this指针进行访问。
        一般如下：
        class 类名 
        {
        public:
            [返回类型] 函数名(类名* const this, ...);
        };
        说明： 
            this指针位于参数列表的最前面，它的定义与传参，都由编译器自动完成。
            在程序中，用户可以直接使用this或*this, 但不可改变this的指向。
            如果该函数是只读的成员函数，则只读成员函数后面的const就是用来修饰这个this指针的
                此时，this的形式为： const 类名* const this 
                当通过this访问对象的成员时，就不能修改对象成员的值了。




9、静态成员
    用关键字 static 说明的成员，称为静态成员：
    静态成员变量
    静态成员函数

    静态成员变量
        用于同类型对象之间的数据共享
        不属于对象，而是属于类型，它不占用对象的存储空间
        静态成员变量必须在类外单独初始化

    静态成员函数
        不属于对象，而是属于类型
        静态成员函数有两种调用方式：
        1、通过对象调用
            对象名.静态成员函数(参数列表);
        2、通过类名调用
            类名::静态成员函数(参数列表);

        静态成员函数中没有this指针
            静态成员函数不能访问非静态的成员变量
            静态成员函数也不能设置为 只读成员函数。



    作业： 
    写一个日期类型Date, 实现获取当前日期的功能

    class Date 
    {
    public:
        Date(int y, int m, int d);
        static Date currentDate();
        ...
    private:
        int _y;
        int _m;
        int _d;
    };

    Date d1(2000,1,1);

    Date today = Date::currentDate();

    提示： time, localtime


    画圆、画BMP图片

    Circle c(10, Point(100,100));
    c.draw(s);


    Bitmap bmp("./1.bmp");
    bmp.draw(s);



10、动态内存管理
    C++中，对象所占用的内存，分三种：
    局部对象                栈区(.stack)
    全局对象/静态对象        静态存储区(.bss .data)
    动态对象                堆区(.heap) 

    C语言中，使用标准库函数 malloc/free 系列函数 来管理动态内存
    在C++中，如果处理的是基础类型，还是可以使用 malloc/free, 但如果处理的是类类型的对象，则不再建议使用
    在C++中，使用 new/delete 运算符(关键字) 来管理动态内存
        new 用来分配(申请)动态内存，delete用来释放动态内存。

    语法格式：
        类型名 * 指针名 = new 类型名;           // 动态创建单个对象，默认初始化
        类型名 * 指针名 = new 类型名(初值列表); // 动态创建单个对象，指定初值进行初始化
        类型名 * 指针名 = new 类型名{初值列表}; // 动态创建单个对象，指定初值进行初始化，C++11
        类型名 * 指针名 = new 类型名[元素个数]; // 动态创建对象数组
        类型名 * 指针名 = new 类型名[元素个数]{初值列表}; // 动态创建对象数组，同时初始化

        delete 指针名;      // 释放单个对象
        delete [] 指针名;   // 释放对象数组


    例： 
        int * p1 = new int;
        Demo * p2 = new Demo;

        int * p3 = new int(100);
        Demo * p4 = new Demo(100,200);
        Demo * p5 = new Demo{100,200};

        int * p6 = new int[5];
        Demo * p7 = new Demo[10];

        int * p8 = new int[5]{1,2,3};
        Demo * p9 = new Demo[10]{Demo(1), Demo(2)};

        delete p1;
        delete [] p6;
        delete p7;
        delete [] p9;

        问题：
        p9是一个指向对象数组的指针，释放时，没写[], 如下
        delete p9;
        会出错吗？会释放几个对象？
        编译没错，执行出错，只释放第一个对象


        问题： 
        new/delete与 malloc/free有什么区别？
        1、new/delete是运算符， 而malloc/free是 标准库函数
        2、new能自动计算所需要的内存大小，而malloc需要用户自己计算
        3、new成功返回相应类型的指针，失败抛出异常 bad_alloc, 而malloc成功返回void*, 失败返回NULL
        4、new在实例化对象时，能自动调用构造函数进行初始化，而malloc不能
        5、delete在释放对象时，能自动调用析构函数以释放资源，而free不会调用析构函数。

    空指针说明：
        传统的宏NULL，在C++依然可以使用，表示空指针
        但在某些情况下，可能会出现语法模糊的情况：
        void foo(int x) {} // 1
        void foo(int* p) {} // 2

        foo(100);   // 1
        foo(p1);    // 2
        foo(NULL); // 模糊不清

        从C++11起，引入了一个新的字面值 nullptr, 专门用来表示空指针
        nullptr不再是宏定义，它有自己的类型 nullptr_t 
        所以，当调用 foo(nullptr); 时， 精确匹配第二个foo函数。


11、字符串类型 string
    C++标准库中提供了一个string类型，专门用来描述字符串这一概念。
    使用方式：
    1、包含头文件 
        #include <string>
    2、实例化对象 
        std::string s1; // 实例化一个字符串对象，表示空字符串
        std::string s2("hello"); // 实例化一个对象，同时初始化
        std::string s2{"hello"}; // 实例化一个对象，同时初始化
        std::string s2 = "hello"; // 实例化一个对象，同时初始化
        std::string("world");   // 临时对象
        std::string s3 = s2;    // 用一个已存在的对象，初始化一个新对象
        std::string s4(10, 'a'); // "aaaaaaaaaa"

    3、常用接口
        size()      用于计算字符串中的字符个数，不包括 \0
        empty()     判断字符串是否为空，为空返回true, 否则返回false
        at()        返回给定下标的字符，如果下标越界，抛出异常 out_of_range
        c_str()     把string类型的字符串，转成 const char*
        ...
        =   +   +=   ==  !=  > >= < <=   >> <<  []


    练习：
        写一个单链表类型
        class ForwardList
        {
        private:
            struct Node // 内部类 / 嵌套类
            {
                Node(int data);
                int _data;
                struct Node* _next;
            };

            Node* _head; // 头指针
            int _size; // 元素个数 
        public:
            ForwardList();
            ~ForwardList();
            void push_front(int data);
            void pop_front();
            int front() const;
            int size() const;
            bool empty() const;
            void print() const;
            ...
        
        };


        ForwardList list; // 空的链表
        // 插入数据
        list.push_front(100);
        list.push_front(200);
        list.push_front(300);

        // 打印输出
        list.print(); // 300 200 100



12、类型转换
    C++中新增加了四种类型转换的方式
    static_cast<目标类型>(表达式)
        用于把编译器的隐式转换 显示的 表达出来
        如 int 和 char/short/double/enum 之间的转换
        如 void* 和 其他类型的指针之间的转换
        如 基类与派生类之间的转换

    reinterpret_cast<目标类型>(表达式)
        用于任意类型的指针之间的转换
        用于整数与指针之间的转换

    const_cast<目标类型>(表达式)
        用于移除引用中的const
        用于移除指向const的指针中的 const （*号左边的const）

        问题：
        const int a = 100;
        int* p = const_cast<int*>(&a);
        *p = 200; // 通过指针p修改了变量a的存储空间中的值
        cout << "a = " << a << endl; // ?100 通过变量名a读取它的值时，不会从它的存储空间中取值，使用的是编译时记录下来的那个初值。
        cout << "*p = " << *p << endl;// ?200 通过指针p获取的是存储空间中的值


    dynamic_cast<目标类型>(表达式)
        用于多态类型之间的转换(下回分解)


    作业： 
        给定一个目录，从该目录中读取它所有的位图文件名，保存到一个链表中
        遍历 文件名链表，获取每个文件名，构造图片对象，绘制到显示屏

        编写一个目录类型
        class Dir 
        {
        public:
            Dir(string path);
            ~Dir();
            ForwardList getBMP();
        private:
            ...
        };

        Dir dir("./pics");
        ForwardList list = dir.getBMP();
        for (int i = 0; i < list.size(); i++)
        {
            string filename = list.at(i);
            Bitmap bmp(filename);
            bmp.draw(s);
            sleep(3);
        }
    


13、异常 exception
    异常 是C++中的一种错误处理机制
    在编程过程中，可能会碰到两类错误：
    1、编译时错误(语法错误)
    2、运行时错误(异常)

    异常的核心思想：把错误的检测与处理分离。

    C++中的异常由以下几部分组成：
    1、抛出异常
        使用关键字 throw 来抛出异常，表示程序出现了运行错误
        语法格式：
            throw 表达式;
        例： 
        void foo(int x)
        {
            if (x < 0)
            {
                throw "error: x < 0";
            }
        }
        当程序执行了throw语句，程序流不再往下执行，而是从当前函数开始查找 异常处理语句
        如果异常没有被处理，则往上抛出，抛出给当前函数的调用者，直到被处理为止。
        如果异常是被系统所捕获，则终止当前进程。

    2、处理异常
        使用 try...catch...语句 来捕获和处理异常
        try
        {
            可能抛出异常的代码块
        }
        catch(异常类型1 形参)
        {
            处理异常1
        }
        catch(异常类型n 形参)
        {
            处理异常n
        }
        catch(...) // 表示捕获任意类型的异常
        {
            处理其他异常
        }
        如果try中的语句块 抛出了异常，则程序流从try跳转到 catch，进行异常类型匹配
            如果匹配成功，则进入异常处理
            如果匹配失败，则按顺序往下匹配
            如果所有的catch都匹配失败，则继续往上抛出，直到被处理为止。



    3、标准库中的异常类型
        C++标准库中，提供了一组异常类型，定义于头文件 <stdexcept>, 用来表示各种各样的异常情况
        常见的异常类型如下：
        std::out_of_range
        std::bad_alloc
        std::logic_error
        std::runtime_error
        ...

        这组异常类型，都有一个成员函数 what(), 返回一个const char*类型的错误信息。

    

14、拷贝构造函数 copy constructor
    拷贝构造函数用于复制(或拷贝)对象
    如果一个类的构造函数的参数是 本类类型的const引用，这种构造函数则称为拷贝构造函数(复制构造函数)
    一般如下：
    class 类名
    {
    public:
        类名(const 类名&); // 拷贝构造函数 
    };
    例：
    class Demo 
    {
    public:
        Demo();
        Demo(int x);
        Demo(const Demo& other); // 拷贝构造函数
    private:
        int x;
        int y;
    };
    如果类没有显示的定义拷贝构造函数，编译器会自动生成一个默认拷贝构造函数, 默认的实现是 按成员的声明顺序 逐成员拷贝。
    Demo d1;
    Demo d2 = d1; // d2.x = d1.x, d2.y = d1.y 

    拷贝构造函数的调用时机：
    1、直接复制一个已存在的对象，得到一个新对象
        Demo d1;
        Demo d2(d1);
        Demo d2{d1};
        Demo d2 = d1;
    
    2、把一个对象的值传递到函数中
        void foo(Demo d); // Demo d = d1;
        foo(d1);

    3、从函数返回一个对象的值
        Demo foo()
        {
            static Demo d;
            return d;
        }
        注： 如果被拷贝的对象 生命周期短暂(拷贝完成后被销毁), 编译器可能会对这种情况进行优化，省略掉拷贝构造函数的调用。

    深拷贝与浅拷贝
        如果对象占用了系统资源，在拷贝这种对象时，把对象的资源一起拷贝(或者重新分配资源)，这种拷贝过程，称为深拷贝
        如果对象占用了系统资源，在拷贝这种对象时，没有拷贝对象的资源，而是共享资源，则这种拷贝过程，称为浅拷贝

        如果对象没有占用系统资源，则一般不需要自定义拷贝构造函数，也不需要显示定义析构函数。


15、关键字 delete 和 default
    delete 关键字：
    1、用于释放new出来的动态内存
    2、用于删除编译器自动生成的某些函数(如拷贝构造函数)（C++11）
    例： 
    class Demo 
    {
    public:
        Demo(const Demo& other) = delete;
    };

    Demo d1;
    Demo d2(d1); // error 

    default 关键字：
    1、用于switch...case...语句中，表示默认情况
    2、用于要求编译器生成某些本该自动生成的函数(如默认构造函数)（C++11）
    例：
    class Demo 
    {
    public:
        Demo() = default;
        Demo(const Demo& other) = delete;
    };


