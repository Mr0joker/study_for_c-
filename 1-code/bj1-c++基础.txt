1、课程计划
    内容：C++、Qt
    时间：3周+1周左右
    目标：熟悉语言本身、标准库、Qt库

2、C++简介
    历史
        1979年，本贾尼-斯特劳斯特卢普 在C语言的基础设计了一门新的编程语言，最初始称为 C with Class
        1984年，正式命名为 C plus plus（C++） 
        C++兼容C语言，现在一般称C和C++为一个系列的语言： C/C++
    领域
        C++应用于 系统与系统软件、嵌入式、图形界面应用、后端(服务端)、游戏开发、科学计算等

    标准(版本)
        1998年  发布了第一个世界标准：  C++98/03
        2011年  发布了第二个世界标准：  C++11
        如果在代码中使用了C++11及以上标准中的语言特性，在(交叉)编译时，可能需要加上编译选项: -std=c++11
        例： 
        arm-linux-g++ xxx.cpp -std=c++11



    编译器
        在Ubuntu中，使用编译器 g++ , 一般需要自行安装：
            sudo apt install g++ 

        在ARM-LINUX中，使用 arm-linux-g++, 需要自己配置，配置过程与arm-linux-gcc类似。
        查看交叉编译器版本：
            arm-linux-g++ -v

        在windows中，使用微软的集成开发环境(IDE): visual studio 20xx


3、第一个C++程序 
    #include <iostream>
    int main(int argc, char const *argv[])
    {
        std::cout << "hello world" << std::endl;
        return 0;
    }
    说明：
    1、标准C++中的头文件都没有扩展名
        如果是使用的标准C或操作系统提供的头文件，使用方式与C相同
        如果是自定义的头文件，则还是要写扩展名，可以是 .h ，也可以是 .hpp
        iostream 是用于输入输出相关功能的头文件

    2、std 是C++标准库中一个作用域的名字，其中存放了标准C++库中所有的名字
        这种用来存放名字的作用域，称为 namespace(命名空间、名字空间)

    
    3、:: 称为 作用域运算符，用于访问指定作用域中的某个名字

    4、标准IO流对象
        cin     标准输入流      (stdin)
        cout    标准输出流      (stdout)
        cerr    标准错误流      (stderr)

    5、输入输出运算符
        <<  输出运算符 ， 结合 cout 或 cerr 使用 
        >>  输入运算符 ， 结合 cin 使用

    6、endl => end line 相当于 "\n"
    



4、namespace(命名空间)
    namespace 是一种作用域，是对全局作用域的切分(本质上是全局的)，用于存放各种名字，如 变量名、函数名、类型名、对象名、命名空间的名称等
    namespace 适用于大型软件的开发，用于解决 软件开发中存在的 名字冲突的 问题。
    同时也表示一个逻辑单元，使得在用户看来，它们是一个整体。

    定义：
    namespace 命名空间名称
    {
        定义变量
        定义函数
        定义类型
        定义命名空间
        ...
    }
    使用方式：
    1、显示限定
        命名空间名称::成员名称
        例： 
        std::cout 
        std::endl

    2、using 声明
        using 命名空间名称::成员名称;
        例： 
        using std::cout;
        using std::endl;
        cout << "hello";
        cout << "world";
        cout << endl;

    3、using 指示
        using namespace 命名空间名称;
        例：
        using namespace std;


    4、全局作用域也可以理解为一个命名空间，但它没有名字，一般可称为 匿名名字空间
        如果需要显示的使用 全局作用域中的 某个名字，方式如下：
            ::全局标识符
        例： 
            ::close(fd); // 操作系统提供的接口都是全局的


    using关键字的说明：
        using不仅能用在命名空间的使用上，还能用于定义类型别名(需要C++11)
        使用using给类型起别名的一般格式如下：
        using 类型别名=类型名;
        例： 
        using uchar = unsigned char;
        using size_t = unsigned long;


5、布尔类型 bool
    bool类型是C++的基础类型之一，用于表示逻辑概念
        零为假，非零即为真
    bool类型只有两种值：真和假
    在C++中，使用 true 表示真，用 false 表示假
    sizeof(bool) == 1

    主要用于两种场合：
    1、条件判断 
    2、函数返回

    例： 
        给定一个字符串，输出其中的数字字符
        "hello 309"

        把判断某个字符是否是数字的功能包装成函数
        bool isdigit(char c);

        bool类型的使用示例：
        bool ok = isdigit('a');
        if (ok)
        {
            // 判断ok为真
        }
        if (!ok)
        {
            // 判断ok为假
        }

    练习：
        给定一个字符串，把其中的小写字母转换成大写字母，再输出
        "hello 309"
        => "HELLO 309"



6、引用 reference
    引用是一个已存在对象的别名。
    语法格式：
        类型名 & 引用名 = 对象名;
    
    例： 
    int a = 100;
    int & r = a; // r就是a, a就是r

    说明： 
    1、引用在定义时，必须初始化
    2、引用一旦绑定成功(初始化完成), 就再也不能成为其他对象的别名了
    3、对引用进行的任何操作，都是在操作与之绑定的对象
    4、引用是别名，不是对象(对象需要占用空间，引用不需要)
    
    引用的主要用途：
        函数参数
        函数返回 （不能返回当前函数的局部变量的引用）
        

    引用分类：
    1、常规引用(左值引用)
        只能绑定到左值的引用，左值引用可读可写。
        int a = 100;
        int & r = a;    // r就是左值引用，只能绑定到左值
        int & r = 100;  // 100是右值，出错
    2、const 引用(常引用)
        既能绑定到左值，也能绑定到右值，通过const引用只能读取对象的值
        const int& r = a;   // 绑定到左值
        const int& r = 100; // 绑定到右值

    3、右值引用
        只能绑定到右值的引用，语法格式如下：
        类型名 && 引用名 = 右值;
        int&& r = 100;
        注：右值引用是C++11为了对象的移动而引入的。


    练习： 
        实现算法swap， 以交换两个整型变量的值
        写两个版本：指针和引用

   

7、函数重载 function overload
    所谓函数重载，指的是在相同的作用域中， 定义函数名相同，但参数列表不相同的函数
    
    例： 
    int sum(int a, int b);
    double sum(double a, double b);

    当调用重载函数时，编译器会根据实参推导其类型，自动匹配相应的函数
    如果实参的类型与形参的不完全一致，编译器会尝试自动做隐式类型转换
    sum(1, 2);  => int sum(int a, int b);
    sum(1.1, 2.2); => double sum(double a, double b);

    sum(1, 2.2); => 错误

    说明： 
    1、函数重载中参数列表不相同的具体情况
        要么 个数不同
            int sum(int a, int b);
            int sum(int a, int b, int c);
        要么 类型不同
            int sum(int a, int b);
            double sum(double a, double b);
        要么 顺序不同
            int sum(int a, double b);
            int sum(double a, int b);

    2、函数重载与返回类型无关。



    作业：
    1、编写函数实现
        max/min

    2、引用与指针有什么区别？

    3、int/float/bool/指针 如何与零值比较？

    4、如何使用cout输出整数的16进制？

    5、复习下Linux中的文件操作，如显示屏与位图显示




8、默认参数 default argument
    在C++中，声明函数时，如果函数有形参，则允许在声明时给形参设置一个默认值
    例： 
    void foo(int x=0);
    foo();  // x = 0
    foo(1); // x = 1
    当调用这种带有默认值的函数时，可以不给有默认值的参数传参，它会自动使用声明时设置的默认值
    如果给这种参数传递实参，则使用用户传递的实参，而不再使用默认值。
    一般格式：
    返回类型 函数名(类型名 参数=默认值, ...);

    注： 
    1、如果函数声明与定义分开，则参数的默认值只能写在声明处
    2、如果函数有多个形参，给其中某个参数设置了默认值，则它右边所有的形参都必须设置默认值


    练习： 
    写一个函数，实现一个整数的n次方
    pow(3); => 9
    pow(2,3);=> 8



9、内联函数 inline
    用关键字 inline 说明的函数，称为内联函数

    在C++中，内联函数是一种优化手段，用于减少函数调用的开销，以提高程序的执行效率。
    当调用这种被说明为内联的函数时，编译器在编译阶段 尝试 把函数体 直接复制到 函数调用点，而不是进行常规的函数调用(传参、跳转、返回等)
    这样做可以消除函数调用的开销，但是可能 会增加最后生成的可执行文件的大小。
    一般格式：
    inline 返回类型 函数名(参数列表)
    {
        函数体
    }

    说明： 
        函数即使被声明为内联函数，但最终能否真正的内联，处决于编译器。
        函数体简单(没有无限循环、没有递归等)，需要频繁调用的函数，才适合写成内联函数。
        在struct和class中定义的函数，默认就是内联函数。
    


10、关键字 extern "C"
    extern "C" 称为链接指示，用于提示C++编译器按照C语言的规则去编译和链接指定的函数。

    C++编译器在编译函数时，会对函数名进行修改(主函数例外)：
        给函数名加前缀和后缀(前缀一般表示作用域，后缀表示的是参数列表)
    例： 
        int sum(int a, int b);
        以上函数被C++编译器编译后，生成的函数名为 _Z3sumii

    但是，C语言编译，不会修改函数名。
    所以，当在C++中，调用Ｃ库中的函数时，就可能会出现 由于函数名不匹配 而产生的链接错误。
    解决方案：
        使用关键字 extern "C" 对C库中的函数进行说明。

    典型示例：
    #ifdef __cplusplus
    extern "C"
    {
    #endif

        int sum(int a, int b);

        void foo();
        
    #ifdef __cplusplus
    }
    #endif

    注： 
        __cplusplus 是C++编译器内置的宏
        extern "C"修饰的函数，能否重载？



